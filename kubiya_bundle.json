{
  "tools": [
    {
      "name": "litellm_hello_world",
      "source": null,
      "alias": null,
      "description": "Greats a person via llm {name}!",
      "type": "docker",
      "content": "\nstart_time=$(date +%s)\n\n# Timing for downloading and installing uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh > /dev/null 2>&1\n. $HOME/.cargo/env\nuv_install_time=$(($(date +%s) - $start_time))\necho \"uv install time: $uv_install_time seconds\"\n\n# Timing for creating virtual environment\nstart_time=$(date +%s)\nuv venv > /dev/null 2>&1\n. .venv/bin/activate > /dev/null 2>&1\nvenv_time=$(($(date +%s) - $start_time))\necho \"virtual environment setup time: $venv_time seconds\"\n\n# Timing for installing requirements\nstart_time=$(date +%s)\nuv pip install -r /tmp/requirements.txt > /dev/null 2>&1\nrequirements_time=$(($(date +%s) - $start_time))\necho \"requirements installation time: $requirements_time seconds\"\n\n# Timing for running the main script\nstart_time=$(date +%s)\npython /tmp/main.py \"{{ .name }}\"\nmain_script_time=$(($(date +%s) - $start_time))\necho \"main script execution time: $main_script_time seconds\"\n\necho \"uv install time: $uv_install_time seconds\"\necho \"virtual environment setup time: $venv_time seconds\"\necho \"requirements installation time: $requirements_time seconds\"\necho \"main script execution time: $main_script_time seconds\"\n",
      "content_url": null,
      "args": [
        {
          "name": "name",
          "type": null,
          "description": "Input param for arg: name, type: string",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": ["LLM_BASE_URL"],
      "secrets": ["LLM_API_KEY"],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "\nfrom typing_extensions import Annotated\n\nimport typer\n\napp = typer.Typer(rich_markup_mode=None, add_completion=False)\n\ndef litellm_hello_world(\n    name: str,\n):\n    import os\n    import litellm\n\n    llm_key = os.environ[\"LLM_API_KEY\"]\n    llm_base_url = os.environ[\"LLM_BASE_URL\"]\n\n    try:\n        response = litellm.completion(\n            model=\"openai/gpt-4o\",\n            api_key=llm_key,\n            base_url=llm_base_url,\n            messages=[\n                {\n                    \"content\": f\"Your task it to great people in a random movie star way, you must say which movie star you choose\",\n                    \"role\": \"system\",\n                },\n                {\"content\": f\"My name is {name}, greet me!\", \"role\": \"user\"},\n            ],\n        )\n    except Exception as e:\n        print(e)\n        return\n\n    print(response.choices[0].message.content)\n\n\napp.command()(litellm_hello_world)\n\nif __name__ == \"__main__\":\n    app()\n"
        },
        {
          "source": null,
          "destination": "/tmp/requirements.txt",
          "content": "litellm==1.49.4\ntyper==0.12.5"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"litellm_hello_world\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"name (Required)<br/>Input param for arg: name, type: string\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>start_time=$(date +%s)<br/><br/># Timing for downloading ...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        EnvVars(\"Environment Variables:<br/>LLM_BASE_URL\"):::envClass\n        Secrets(\"Secrets:<br/>LLM_API_KEY\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    }
  ],
  "errors": [],
  "python_bundle_version": "3.12.2"
}
